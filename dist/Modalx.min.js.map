{"version":3,"sources":["Modalx.min.js"],"names":["f","exports","module","define","$","window"],"mappings":"UAAUA,GAAG,GAAoBC,iBAAVA,SAAoC,oBAAAC,OAAaA,OAAOD,QAAQD,SAAmBG,GAASA,mBAATA,QAAqBA,OAAYA,IAAAA,OAAUH,GAAAA,OAezII,EAAAA,oBAfiKC,OA6B7JJ,OAAAA,oBAAAA,OAAAA,OAAAA,oBAAAA,KAAAA,KAAAA,MAAAA,OAAAA,MAAAA,WAAAA,OAAAA,SAAAA,EAAAA,EAAAA,EAAAA,GAAAA,SAAAA,EAAAA,EAAAA,GAAAA,IAAAA,EAAAA,GAAAA,CAAAA,IAAAA,EAAAA,GAAAA,CAAAA,IAAAA,EAAAA,mBAAAA,SAAAA,QAAAA,IAAAA,GAAAA,EAAAA,OAAAA,EAAAA,GAAAA,GAAAA,GAAAA,EAAAA,OAAAA,EAAAA,GAAAA,GAAAA,IAAAA,EAAAA,IAAAA,MAAAA,uBAAAA,EAAAA,KAAAA,MAAAA,EAAAA,KAAAA,mBAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,CAAAA,QAAAA,IAAAA,EAAAA,GAAAA,GAAAA,KAAAA,EAAAA,QAAAA,SAAAA,GAAAA,OAAAA,EAAAA,EAAAA,GAAAA,GAAAA,IAAAA,IAAAA,EAAAA,EAAAA,QAAAA,EAAAA,EAAAA,EAAAA,GAAAA,OAAAA,EAAAA,GAAAA,QAAAA,IAAAA,IAAAA,EAAAA,mBAAAA,SAAAA,QAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,IAAAA,EAAAA,EAAAA,IAAAA,OAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,SAAAA,EAAAA,EAAAA,s4DAAAA","file":"Modalx.min.js","sourcesContent":["(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.Modalx = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n'use strict';\n\n/**\r\n * Modalx.js\r\n * @author Ozy Wu-Li - @ousikaa\r\n * @description Simple modal toggler\r\n */\n\n// https://github.com/jquery-boilerplate/jquery-patterns/blob/master/patterns/jquery.basic.plugin-boilerplate.js\n\n// the semi-colon before the function invocation is a safety\n// net against concatenated scripts and/or other plugins\n// that are not closed properly.\n// the anonymous function protects the `$` alias from name collisions\n;(function ($, window, document, undefined) {\n    /**\r\n     * Plugin namespace\r\n     */\n    var namespace = {\n        pluginName: 'Modalx'\n    };\n\n    /**\r\n     * Defaults\r\n     */\n    var defaults = {\n        opener: 'js-modalx-open',\n        target: 'js-modalx-target',\n        closer: 'js-modalx-close',\n        isVisibleClass: 'is-visible',\n        singleModalTarget: false,\n        autoTarget: true,\n        openCallback: function openCallback(event) {\n            console.log('open callback');\n        },\n        closeCallback: function closeCallback(event) {\n            console.log('close callback');\n        }\n    };\n\n    /**\r\n     * Plugin Constructor\r\n     */\n    namespace['pluginName'] = function (options) {\n        this.options = $.extend({}, defaults, options);\n        this.init();\n    };\n\n    /**\r\n     * Prototype\r\n     */\n    namespace['pluginName'].prototype = {\n        /**\r\n         * \r\n         */\n        init: function init() {\n            $('.' + this.options.opener).on('click', this.openModal.bind(this));\n            // $(`.${this.options.closer}`).on('click', this.closeModal.bind(this));\n            $('.' + this.options.target).on('click', this.closeModal.bind(this));\n            $('.' + this.options.opener + ', .' + this.options.closer).children().css('pointer-events', 'none');\n\n            if (this.options.autoTarget) {\n                this.addId();\n            }\n        },\n\n        /**\r\n         * \r\n         */\n        addId: function addId() {\n            if (!this.options.singleModalTarget) {\n                for (var index = 0; index < $('.' + this.options.opener).length; index++) {\n                    $('.' + this.options.opener).eq(index).attr('data-modalx-id', '' + index);\n                    $('.' + this.options.closer).eq(index).attr('data-modalx-id', '' + index);\n                    $('.' + this.options.target).eq(index).attr('data-modalx-id', '' + index);\n                }\n            } else {\n                $('.' + this.options.opener).attr('data-modalx-id', 'single');\n                $('.' + this.options.closer).attr('data-modalx-id', 'single');\n                $('.' + this.options.target).attr('data-modalx-id', 'single');\n            }\n        },\n\n\n        /**\r\n         * \r\n         */\n        openModal: function openModal(event) {\n            event.preventDefault();\n            $(event.target).addClass(this.options.isVisibleClass);\n            var thisTargetId = $(event.target).attr('data-modalx-id');\n\n            $('.' + this.options.target + '[data-modalx-id=\"' + thisTargetId + '\"]').addClass(this.options.isVisibleClass);\n\n            // Run callback after user opens modal\n            if (this.options.openCallback) {\n                this.options.openCallback(event);\n            }\n        },\n\n        /**\r\n         * \r\n         */\n        closeModal: function closeModal(event) {\n            event.preventDefault();\n            if ($(event.target).closest('.js-modalx-content').length) {\n                console.log('clicking content');\n            } else {\n                // remove modal visibility\n                $('.' + this.options.target).removeClass(this.options.isVisibleClass);\n\n                // Run callback after user closes modal\n                if (this.options.closeCallback) {\n                    this.options.closeCallback(event);\n                }\n            }\n        }\n\n        /*------------------------------------*\\\r\n          EXPORT OPTIONS\r\n        \\*------------------------------------*/\n    };module.exports = namespace['pluginName'];\n})(jQuery, window, document);\n\n},{}]},{},[1])(1)\n});\n"]}